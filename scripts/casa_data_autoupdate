#!/bin/bash

UPDATE_INTERVAL=7
AUTOUPDATE_ENABLED="false"
CASA_DATA_USER_DIR="$HOME/.carta/data"
CASARC_FILE="$HOME/.carta/casarc"

function check_json_settings {
    # False JSON parsing
    # Remove spaces, comma, and quotes, then replace colon with one space to get two columns of key-value pairs
    # Finally filter the key-value pair using awk and print the value (2nd column)
    JSON_AUTO_UPDATE_CASA=$(cat ~/.carta/config/preferences.json | sed -e 's/[",{}]//g;s/[[:space:]]//g;s/:/ /g' | awk -F" " '$1=="auto_update_casa_data" {print $2}')
    if [ "$JSON_AUTO_UPDATE_CASA" == "true" ]
    then
        AUTOUPDATE_ENABLED="true"
    fi
    JSON_AUTO_UPDATE_CASA_DATA_INTERVAL=0
    JSON_AUTO_UPDATE_CASA_DATA_INTERVAL=$(cat ~/.carta/config/preferences.json | sed -e 's/[",{}]//g;s/[[:space:]]//g;s/:/ /g' | awk -F" " '$1=="auto_update_casa_data_interval" {print $2}')
    if [ $JSON_AUTO_UPDATE_CASA_DATA_INTERVAL -gt 0 ]
    then
        UPDATE_INTERVAL=$JSON_AUTO_UPDATE_CASA_DATA_INTERVAL
    fi
}

function check_cmd_status {
    STATUS=$?
    if [ $STATUS -ne 0 ]
    then
        echo "Something went wrong. Exiting."
        exit $STATUS
    fi
}

function autoupdate {
    WGET="wget"
    CURL="curl"
    MEASURES_DATA_URL="ftp://ftp.astron.nl/outgoing/Measures/WSRT_Measures.ztar"
    TAR_CMD="tar -xzf /tmp/WSRT_Measures.ztar"
    CLEAN_UP="rm /tmp/WSRT_Measures.ztar"

    if [ -x "$(command -v $WGET)" ];
    then	    
        $WGET $MEASURES_DATA_URL -P /tmp && $TAR_CMD -C $CASA_DATA_USER_DIR && $CLEAN_UP
        check_cmd_status # check if status code is zero and exit if not
    else
        echo "ERROR: $WGET command not found" >&2
        echo "Trying curl"
        
	if [ -x "$(command -v $CURL)" ];
	then
            $CURL $MEASURES_DATA_URL --output /tmp/WSRT_Measures.ztar && $TAR_CMD -C $CASA_DATA_USER_DIR && $CLEAN_UP
            check_cmd_status # check if status code is zero and exit if not
        else
            echo "ERROR: $CURL is not installed." >&2
	    echo "ERROR: Please install $WGET or $CURL." >&2
            exit 1
        fi
    fi

    echo "$(date)" > $CASA_DATA_USER_DIR/last_update
    sleep 0.6 # let the progress bar update end
}

function datediff {
    # date -j -f "%a %b %d %T %Z %Y" "`date`" "+%s" gives the number of seconds since the epoch
    # LAST_UPDATE_DATE=$(cat $CASA_DATA_USER_DIR/last_update)
    let LAST=$(date -j -f "%a %b %d %T %Z %Y" "`cat $CASA_DATA_USER_DIR/last_update`" "+%s")
    let TODAY=$(date -j -f "%a %b %d %T %Z %Y" "`date`" "+%s")
    let DIFF=TODAY-LAST
    let DIFF=DIFF/86400
    echo $DIFF
}

function launch_auto_update {
    # http://mywiki.wooledge.org/BashFAQ/034
    autoupdate &
    local i=0
    local sp='/-\|'
    local n=${#sp}
    printf ' '
    sleep 0.1
    while ! [ -f $CASA_DATA_USER_DIR/last_update ]; do
        printf '\b%s' "${sp:i++%n:1}"
        sleep 0.2
    done
    # done
    printf '\b%s' ''
    printf "Update completed successfully on $(date).\n"
}

function autoupdate_if_needed {
    if [ $AUTOUPDATE_ENABLED == "true" ]
    then
        if [ ! -f $CASARC_FILE ]
        then
            echo "measures.observatory.directory: ~/.carta/data/geodetic" > $CASARC_FILE
        fi
        if [ ! -d $CASA_DATA_USER_DIR ]
        then
            mkCASA_DATA_USER_DIR -p $CASA_DATA_USER_DIR # will make a CASA_DATA_USER_DIRectory if it doesn't exist
        fi
        if [ -f $CASA_DATA_USER_DIR/last_update ]
        then
            DATE_DIFF=$(datediff)
            if [ $DATE_DIFF -gt $UPDATE_INTERVAL ]
            then
                echo "CASA data has not been updated in $DATE_DIFF days. CARTA will try to update the ephemerides and geodetic data now."
                rm $CASA_DATA_USER_DIR/last_update
                launch_auto_update
            else
                echo "CASA data has been updated in the last $DATE_DIFF days. CARTA will not update the ephemerides and geodetic data."
                exit 0
            fi
        else
            echo "CASA data has not been updated. CARTA will attempt to update automatically."
            launch_auto_update
        fi
    else
        echo "CARTA will use the default ephemerides and geodetic data."
        exit 0
    fi
}

# Logic starts here
# Check JSON for preferences.json settings
check_json_settings
echo "AUTOUPDATE ENABLED = $AUTOUPDATE_ENABLED"
echo "UPDATE INTERVAL = $UPDATE_INTERVAL"
# Launch auto update
autoupdate_if_needed
