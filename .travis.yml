language: cpp
os: osx
compiler: clang
osx_image: xcode10.1

python:
  - 2.7

language: node_js
node_js:
  - "8"

cache:
  directories:
    - $HOME/casacore
    - $HOME/measures_data
    - $HOME/package
    - $HOME/carta-frontend-built
    - $HOME/emsdk

before_install:
    - ls /usr/local/include/
#    - sudo rm /usr/local/include/c++
    - brew update > /dev/null
    - brew install gcc || brew link --overwrite gcc
    - brew link gcc # needed to use xcode10
    - which gfortran
    - brew install tbb fmt protobuf cfitsio wcslib fftw hdf5
# using default system openssl   - brew install openssl

env:
  global:
    - secure: "j7DSuAPakgiDdsF9Jp2oKk1lVT5v1dt26I6j4oVrEBcHfAioqy+s1MJgB9be5HQ/q1tTl8Z/C8ssgrRv5zmCtNAOnGtUFYFee/zJEFT+w4ta1jSYwXT68yp4I7KWHzPny4ziW33zKFUlmFCqztBDQX5yiwpTq7eC2BpfJckEaPbhgJuxmQPwWM4Qy3S7YG/H+qilQwYU4UMUzJu44SBsoOxusIcMz7KnP70MJTaaJu66XtFBJqx0UzqaakOZolytf23quvQemB4VDN/wtoZTlem4K9XMpBc7DDkm0xL29bLqmWGE04YqJKhLbsPA8QbcvR9+tbQ7HNn+927Y3uCcN6+DxhAEH/U3Lz621+ikOldmIYeEyNgW7I9mSxAk0bWA2+z36qZPZMsHK4tWosBf8hsQTKHnCV/psR/9WqcUX+7l3Ss6tOcY6S1hyVRa/YwVSj27MuItDKHMuuCWk8hssGFYQ/4IKEMN2JQJomqTPVx0Q+4dAxHoGfLvmumZ3lq8vMi4hcQAVzdMJKNyRziUUxGEOYqljy2bX0oFjU4bnavx7x2FqFrBFE2oNkQuqTyTchLloIh1SxEgX0sXwm5/HZipjs3agHOv3UGUPT6JVqexOITJbqdKi945miEUYapgDbHnEdy3k7cZcR4NXsaEkpbHxRHM1MNwc3Nt62EVUtg="
    - secure: "SR0YMCkjfQwCU0BoYJNgBo+GxKomRvGBtA+UssoXjMoXp5dZh5b5x0YubNOm3rWTCN13uX/1Ga0sHg3bRT166/BUO76W6GbXvlEjfPtp0MuUsjq1TqD6dFV5swRnt+i4JtcqRyKpvKIZ5Be4O4WGossgMZDHCSaiuSkAzd0WZdWNbEgapKwpUx2evv8+47K3yNb4BrMAN12kXYSmK0PMM9LoVQprWvHIiUXBIdlkK4ICtpVQutgdC/eiWvQGXZlxzQZRQ1ag4neX5shWqlSvKAdB1ht9gNu+OeTJQskTRQPV9gYKWhhEBQyUXRFd8+No95yuEPbEaziNi07OZGCPPv+F7OJszGyJBJVWoCTIRdlp7wSQxjMDfIbJ8vxJnYtfQQ/Xr5MufhM+sTFwZu6c9QT+/OJd6kOzc2FgXztOLavwIKH1IQaXp4NyTsgEFTdexHbC2Msnfsupu1buPjbFNUGuuZ214hf/RAsJkV/IN7N3h9/kW0hu4CKRA2Bh/9aPOjSJLuc52WCZ9TmpixRoFLX/jvdUYk0qpnf0omB/dIiqOoBJ3u+QjRirqFHfHx4LEsqg3QgrSFZOBV1bFSTDNofeI0HX/YTqBt5xdRDLdBKgQs7J7VywMkv1WnIJiszpC7/VUkKX0jSGY7MglhUOvUcdCVD/RotIZBUiUr/Daxk="
    - secure: "sFjAmnQqAd4aFuSlzDmL+jlL5oNNGWNDnc/+nzQfIbRNeVkEv2tksA9xvxEV/X9pAWXEPOv5h5cMxE8/Ht/+YIrOEAPhE04wx/kbftuVncASaYjMJ1RpPBT4/0Er6Fq0D5nJXDzSes8CGWrOQBCC/BR7fcrctdT0C2IvF81gXXdzpj4jufhaTrlO/WOw3cUqUfLXxB0TfwVAbVUO/knzxMW8SSEZxB9pRCScNqd0fS//BvDx+Zo36xXmKvN4Q0byDR0jf4DeFIDiqFP/fVdYAN1690qKtHQb9Vzn617UhqAQ3hrKfIvkVZKvyAyksXiZGhy5tVmFgGshjy5RWpifVzRtW4Qq/1bETG1qvuU52CYsWd4QfdF/ZEeN2NczI7VcoiznuHH0JNdxKam0CFcOE2cl3q14wqvVyKryUT9xDG3EBlOYUfSy7049Opdvfa+nqph3eK9OOX7ZZrYPIvLzLq96CANYhwmXzTaDJJVIgfyClaS2fgL5y5sVtFOiPhYPUbYuZEu7NyEFNBi1ryU4ChgfmGqRq9BHx5feRG/gGKL4y63NR+SObn6n9sJKsPxvm2l5FHIiA7a3Qg8FjyVfE20aM1wqN+lxTe75S9rxpfZ1ylI88DPU8ts3DP5DK92espv86bvcY5ExYOO6IYjtDS4RwmFhpkvkTWV0DRessLI="
    - secure: "JeV5dp7s1diGTu3mQxQGYuEN5F/sgXuzehYe47Tv1TXF1RrENRwkOiESDV8k2w62lvM7/NGlkD2/hpKHOSy6E2/LlArb10N1sldWeqA+aANDLkiDyg9fewbYQuYD8UrBAnUPOv6QKDs+X2B7BfKhXHfg3C7WutZPEHRcd4Oh6LPvWude+2jFtels46GAh35SBty6mFtJ3sS9JNJRvtYYepVo1wFyP96tomtbBTu2YQ03qKsxpaJ+D0d1lCIIO4bXQ/991X+i5zh0VICRI/Im8LUR3+7+xgCjMPIHLmN6ii6TZHA5SWxdixQh0yx2VCrNsm+Lu74mr8fEAES7xLG4xgzJMQfCelDOw8GRwWwO1biAKoLvsvCeMgi4tWhvFYZJHT0QXO1/W4VsOTaDM9enJHOKsDrZpvaZq4bKPM0Z7Z7VZQKRyZZmI5lAspp94v5RoP+uKf9GiMhTGwJWKDt0/pI8lE8XqI+ybpxFwM1miVOd3eeV+TahF3wlrs6bk/ATvl0rNP4c656u+yO/4CLkmmG89973pdkai4FxQXuHiomPA0oI5RH2XfMQq7kAF/04rXIEXdHLP67tjr0pf1Eug7Kd4MYM9qsMKV2hM2tEgnVsuHsGTrUp9qm3GRg/CZ8e+XbAB1ng7UisZrwIRIVtG1HOSiRp77CnCj44BzQx8nA="
    - secure: "yKQ+/ajtyqkaQkTjROKPCSDhluIA+chF7oVqbr6S3+nlv+OIWyaaff1qqFH+YxEaSAanEASDZBO8PJkjaN5sv5/GqH8SVVHQJcVWMUz+8PH71KWgsGK8kmhePjGqz9LDJLaBTEettdKXmfXewn0/IRphZeoipTs7Br8/sEwgFTr575ZGI96mILRk6dJIh02vsGNpUptpjy45WcqDPHFkX46hg90ASujl57xb0RfoiZl8kosz5lRsampfDjmQrvwhCak3+SzQ0c2qsMj3kgrUQYNLRHmvKaQ+SdKwz638uVrvsepgogHoQHAzSQgKSTupQp9HuTs25hJYGZ7qpYOjopSXxe1E9TjFbb3DnhaPEdMsdlLExZ9go4KbG7vesaF0c/UjDsCi4wRWMrgMvWoBt3ScwRfWylGavmJSCRQDYPHPyvKY147DkZrd1PzS2YwQdcth9u6hPEMDcV/nW4MNLZgq0CLTN9sbzppYZLCv0xeq5lhELIqW4ba1ih2AdKf2BvBF27VocdbDqk26ifEli5CgB8oDuEzZZnR9Vj/DBtiuBPTxT4/8/o1Cn4feQRvVx2fuOFhjp8JHjC9YpHKnmUdDKVRcc15P02x/cSO3vKf7kDpPwoLds937ksjecR4WjjImE1u7jMZ0c2NbEYnwQlMvNQv63/m2shPbFc3b7AE="

global:
    - CI_NODE_TOTAL=2 # attempt to speed up the build process so the casacore stage can finish within 50 minutes

jobs:
  include:
    - stage: build casacore
      install: true
      script:
        - ls /usr/local/opt/openssl/
        - cd $HOME
        - ls
        - ls $HOME/casacore/
        - if [ -e "$HOME/casacore/lib" ]; then echo "casacore cache exists"; else echo "building casacore" && $TRAVIS_BUILD_DIR/scripts/ci_mac_casacore.sh; fi

    - stage: build carta-backend
      install: true
      script:
        # copy cached casacore to default system location
        - sudo cp -r $HOME/casacore/lib/* /usr/local/lib/
        - sudo cp -r $HOME/casacore/include/casacore /usr/local/include/
        - cd $HOME

         # echo install libuv
        - git clone https://github.com/libuv/libuv.git
        - cd libuv
        - sh autogen.sh
        - ./configure
        - make -j 2
        - sudo make install
        - cd ..

        # install uWebsockets
        - git clone https://github.com/uNetworking/uWebSockets.git
        - cd uWebsockets
        - git checkout c7aa984 # changing to the old non-'clang'-only Makefile
        - make
        - sudo make install
        - cd ..

        # install zfp
        - git clone https://github.com/LLNL/zfp.git
        - cd zfp && mkdir build && cd build
        - cmake ..
        - make
        - sudo make install
        - cd ../..

        # build carta-backend
        - echo "Building carta-backend" 
        - cd $TRAVIS_BUILD_DIR
        - git submodule init && git submodule update
#        - sed -i '' 's/target_link_libraries(carta_backend/target_link_libraries(carta_backend uv/g' CMakeLists.txt # fix to find uv
        - mkdir build && cd build
        - cmake -DCMAKE_CXX_FLAGS="-I /usr/local/opt/openssl/include" -DCMAKE_CXX_STANDARD_LIBRARIES="-L /usr/local/Cellar/fmt/5.1.0/lib -L /usr/local/Cellar/hdf5/1.10.4/lib -L /usr/local/lib -L /usr/local/opt/openssl/lib" ..
        - make
        - ls -sort
        - otool -L carta_backend

        - echo "Package carta-backend"
        # install macdylibbundler
        - git clone https://github.com/auriamg/macdylibbundler.git
        - cd macdylibbundler
        - make
        - sudo make install
        - cd ..
        - mkdir -p package/bin && cd package/bin && cp ../../carta_backend .
        - cp $TRAVIS_BUILD_DIR/scripts/run.sh .
        - cp /usr/local/lib/libuWS.dylib .
#        - install_name_tool -change @rpath/libzfp.0.dylib /usr/local/lib/libzfp.0.dylib carta-backend
        - otool -L carta_backend
        # Problematic for dylibbundler to find libzfp.0.dylib. 
        # (Changing path with install_name_tool does not seem to work).
        # Location needs to be manually entered in dylibbundler several times.
        # dylibbundler also needs location of libboost_system-mt.dylib entered manually.
        # To save more trial-and-error to find the correct sequence, copy libzfp.0.dylib to 
        # /usr/local/opt/boost/lib/ (same location as libboost_system-mt.dylib) 
        # so that "keyboard_input.txt" only needs to send one entry multiple times.
        #
        - sudo cp /usr/local/lib/libzfp.0.dylib /usr/local/opt/boost/lib/

        - dylibbundler -od -of -b -d ../libs -x carta_backend < $TRAVIS_BUILD_DIR/scripts/keyboard_input.txt
        - rm libuWS.dylib
        - otool -L carta_backend

        - cd .. && mkdir etc && cd etc
        - if [ -e "$HOME/measures_data/measures_data.tar.gz" ]; then echo "measures data cache exists"; else echo "downloading measures data" && curl -o $HOME/measures_data/measures_data.tar.gz  http://alma.asiaa.sinica.edu.tw/_downloads/measures_data.tar.gz; fi
        - cp $HOME/measures_data/measures_data.tar.gz .
        - tar -xvf measures_data.tar.gz
        - rm measures_data.tar.gz
        - mv measures_data data        
        - cd ..
        - ls bin/
        - ls libs/
        - ls etc/
        - cd ..
        - rm -rf $HOME/package #remove any old cached package directory
        - cp -r package $HOME/

    - stage: upload package
      install: true
      script:
        - echo "Upload the package"
        - cd $HOME
        - ls -sort
        - cd $TRAVIS_BUILD_DIR
        - export SHORT_COMMIT_ID="$(git rev-parse --short ${TRAVIS_COMMIT})"
        - cd -
        - echo "$SHORT_COMMIT_ID"
        - cp -r package MacOS_backend_$SHORT_COMMIT_ID
        - tar -czvf MacOS_backend_$SHORT_COMMIT_ID.tar.gz MacOS_backend_$SHORT_COMMIT_ID
        - export SSHPASS=$DEPLOY_PASS
        - brew install https://raw.githubusercontent.com/kadwanev/bigboybrew/master/Library/Formula/sshpass.rb
        - export SSHPASS=$DEPLOY_PASS
        - sshpass -e scp -o stricthostkeychecking=no -P $DEPLOY_PORT MacOS_backend_$SHORT_COMMIT_ID.tar.gz $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH
        - echo "Finished !!"

    - stage: run tests
      install: true
      script:
#set up emscripten
        - cd $HOME
        - rm -rf emsdk
        - git clone https://github.com/juj/emsdk.git
        - cd emsdk
        - git pull
        - ./emsdk install sdk-1.38.11-64bit
        - ./emsdk activate sdk-1.38.11-64bit
        - source ./emsdk_env.sh
        - cd $HOME
# prepare frontend
        - git clone https://github.com/CARTAvis/carta-frontend.git
        - cd carta-frontend
        - git submodule init
        - git submodule update
        - npm install
        - cd wasm_libs
        - ./build_libs.sh
        - cd ..
        - cd wasm_src
        - ./build_wrappers.sh
        - cd ..
        - cd protobuf
        - ./build_proto.sh
# prepare tests
        - cd $HOME
        - wget http://alma.asiaa.sinica.edu.tw/_downloads/carta-backend-ICD-test-travis.tar.gz
        - tar -xvf carta-backend-ICD-test-travis.tar.gz
        - cd $HOME/package/bin
        - sed -i '' 's/carta_backend/carta_backend base=$HOME\/carta-backend-ICD-test-travis root=$HOME\/carta-backend-ICD-test-travis/g' run.sh
        - ./run.sh & # run carta_backend in the background
        - cd $HOME/carta-backend-ICD-test-travis
        - cd protobuf
        - git submodule init
        - git submodule update
        - npm install
        - ./build_proto.sh
        - cd ..
        - ls src/test/
        - ./run-travis.sh
        - echo "Finished !!"
